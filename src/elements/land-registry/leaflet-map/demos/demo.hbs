---
title: LeafletJS map
---
<h1 class="heading-xlarge">
  <span class="heading-secondary">{{component.categories.primary}} / {{component.categories.secondary}}</span>
  {{component.name}}
</h1>

<div class="grid-row">
  <div class="column-third">
    <div class="map" id="map"></div>
  </div>
  <div class="column-two-thirds">
    <p>Including LeafletJS in the build includes the necessary core Leaflet CSS and JavaScript files. However, the LeafletJS API is too broad and varied to attempt any kind of clever binding to HTML data attributes. Therefore it is left to the application developer to actually intialize and deal with the map to suit their needs.</p>
    <p>Note: Maps are configured to fill the horizontal space they are placed in, and to be square. There is no need to set a width/height on them.</p>
  </div>
</div>

<script>
  window.onload = function() {

    var indexData = {
      "crs": {
        "properties": {
          "name": "urn:ogc:def:crs:EPSG::27700"
        },
        "type": "name"
      },
      "geometry": {
        "coordinates": [
          [
            [441187.5, 112344.0],
            [441186.0, 112354.0],
            [441193.0, 112356.5],
            [441194.5, 112346.5]
          ]
        ],
        "type": "Polygon"
      },
      "properties": {
        "colour": 25,
        "feature_id": 4019,
        "graphic_type": "Bordered Polygon",
        "render_attributes": {
          "border_colour": 25,
          "border_width": 0,
          "exterior_edge_colour": 1,
          "exterior_edge_thickness": 2,
          "exterior_edge_thickness_units": "Pixels",
          "fill_colour": 25,
          "fill_style": 9,
          "render_level": "0"
        },
        "width": 0
      },
      "type": "Feature"
    };

      // Define coordinate system using PROJ4 standards
    var projection_name = 'EPSG:27700'
    // from: http://epsg.io/27700-5622 - TODO: research which transformation we should use
    var projection_def = '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=370.396,-108.938,435.682,0,0,0,0 +units=m +no_defs'

    new L.Proj.CRS(projection_name, projection_def,
      {
        resolutions: [2500, 1000, 500, 200, 100, 50, 25, 10, 5, 2.5, 1],
        bounds: L.bounds([1300000,0],[700000,0])
      }
    );

    // set up control and options
    var options = {
      continuousWorld: true,
      worldCopyJump: false,
      minZoom: 5,
      maxZoom: 19,
      // controls
      dragging: false,
      touchZoom: false,
      doubleClickZoom: false,
      scrollWheelZoom: false,
      boxZoom: false,
      keyboard: false,
      tap: false,
      zoomControl: true,
      attributionControl: true
    };

    // set up the map
    var map = new L.Map('map', options);

    // create the tile layer with correct attribution
    var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
    var osm = new L.TileLayer(osmUrl, {
      attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    });
    map.addLayer(osm);

    //Add a scale control to the map
    L.control.scale().addTo(map);

    //Index stlye
    var indexStyle = {
      fillcolor: 'blue',
      fillOpacity: document.getElementById('map').classList.contains('polygon') ? 0.5 : 0,
      opacity: 0
    };

    //Create the index layer
    var indexGeoJson = L.Proj.geoJson(indexData, {
      style: indexStyle
    });

    indexGeoJson.addTo(map);

    //Center map view on geojson polygon
    var bounds = indexGeoJson.getBounds();

    if(!document.getElementById('map').classList.contains('polygon')) {
      L.marker(bounds.getCenter(), {
          title: ''
      }).addTo(map);
    }

    map.fitBounds(bounds, {maxZoom: 18, animate: false});

  }

</script>
